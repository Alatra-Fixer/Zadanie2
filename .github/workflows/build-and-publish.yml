name: Build, Scan & Push Docker Image to GHCR

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build_and_scan:
    name: Build multiarch image, test CVE and push to GHCR
    runs-on: ubuntu-latest

    steps:
      # Checkout kodu źródłowego
      - name: Checkout repository
        uses: actions/checkout@v4

      # Ustawienie QEMU dla multiarchitektury
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      # Konfiguracja Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Generowanie metadanych i tagów obrazu
      - name: Docker metadata definitions
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/alatra-fixer/pogoda
          flavor: latest=false
          tags: |
            type=sha,priority=100,prefix=sha-,format=short
            type=semver,priority=200,pattern={{version}}

      # Logowanie do DockerHub (dla cache)
      - name: Login to DockerHub for cache
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Logowanie do GitHub Container Registry (ghcr.io)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Budowanie obrazu dla wielu architektur (linux/amd64, linux/arm64)
      # Budujemy z tagiem "candidate", który następnie zostanie zeskanowany
      - name: Build Docker image (candidate tag)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/alatra-fixer/pogoda:candidate
          cache-from: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/pogoda:cache
          cache-to: |
            type=registry,ref=${{ vars.DOCKERHUB_USERNAME }}/pogoda:cache,mode=max

      # Skanowanie obrazu za pomocą Trivy pod kątem luk CVE
      - name: Scan image for vulnerabilities using Trivy
        id: scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/alatra-fixer/pogoda:candidate
          severity: CRITICAL,HIGH
          exit-code: '1'

      # Retagowanie obrazu candidate do finalnych tagów i wypchnięcie go do GHCR
      - name: Apply final tags and push image
        if: success()
        run: |
          docker pull ghcr.io/alatra-fixer/pogoda:candidate
          for tag in $(echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n'); do
            echo "Retagging image as $tag"
            docker tag ghcr.io/alatra-fixer/pogoda:candidate $tag
            docker push $tag
          done

      # Opcjonalne czyszczenie tagu candidate z lokalnego repozytorium
      - name: Cleanup candidate tag
        if: success()
        run: docker rmi ghcr.io/alatra-fixer/pogoda:candidate
